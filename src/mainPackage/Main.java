package mainPackage;

import java.util.Random;
import java.util.Scanner;

import static java.lang.Math.random;

public class Main {
    static int SIZE = 20;

    public static void main(String[] args){
        int currentIndex = 4;
        Scanner sc = new Scanner(System.in);
        int optionSelected;
        Employee employeeList[] = new Employee[SIZE];
        employeeList[3] = new Employee("Stephen Evern", 4,"05/22/2019", 12.5, 0.2f);
        employeeList[1] = new Employee("Diana Alfonso", 2, "04/02/2016", 0.06f                );
        employeeList[2] = new Employee("Jose Mercado",3, "18/12/2018", 12.5, 0.2f);
        employeeList[0] = new Employee("Jose Ghersy", 1, "05.15.2015", 12.5, 0.2f);
        //Expenses test = new Expenses();
        Expenses weekExpenses;
        Income weekIncome;

        do {
            optionSelected = displayMainMenu();
            switch (optionSelected){
                case 1:
                    employeeList[currentIndex] = addNewEmployee(currentIndex);
                    currentIndex++;
                    break;
                case 2:
                    displayEmployees(employeeList, currentIndex);
                    break;
                case 3:
                    int employeeBeingDeleted = deleteEmployees(employeeList, currentIndex);
                    if (employeeBeingDeleted > currentIndex){
                        System.out.println("No Action Was Performed");
                        displayEmployees(employeeList, currentIndex);
                    }
                    else{
                        employeeList[employeeBeingDeleted - 1] = new Employee();
                        displayEmployees(employeeList, currentIndex);

                    }
                    break;
                case 4:
                        Employee employeeList2[] = new Employee[SIZE];
                        employeeList2 = editEmployeeById(employeeList);
                        employeeList = employeeList2;
                        System.gc();
                    break;
                case 5:
                        searchEmployee(employeeList, currentIndex);
                    break;
                case 6:
                        weekExpenses = new Expenses();
                        weekIncome = new Income(weekExpenses.getTotalExpenses());
                        calculatePayForEachEmployeee(employeeList);
                    break;
                default:
                    break;
            }
        }
        while(optionSelected != 0);





    }
    public static void getEmployeeInfo(){
        Scanner sc = new Scanner(System.in);

    }
    public static int displayMainMenu(){
        Scanner sc = new Scanner(System.in);
        int selection;

        System.out.println("Employee.Main Menu\n\n");
        System.out.println("1. Add new Employee");
        System.out.println("2. Display all employees");
        System.out.println("3. Delete employee");
        System.out.println("4. Edit Employee");
        System.out.println("5. Search for an employee");
        System.out.println("6. Calculate Expenses and Pay");
        System.out.println("0. to exit the program");
        selection = sc.nextInt();
        return selection;

    }
    public static Employee addNewEmployee(int currentIndex){
        Scanner sc = new Scanner(System.in);
        Employee addingEmployee;
        String firstName, lastName, startDate;
        int employeeID;
        float employeeCommission;
        double employeeHourlyRate;
        System.out.println("First Name:");
        firstName = sc.next();
        System.out.println("Last Name");
        lastName = sc.next();
        currentIndex++;
        employeeID = currentIndex;
        System.out.println("Autogenerated EmployeeId:" + employeeID);
        System.out.println("Start date:");
        startDate = sc.next();
        System.out.println("Employee Hourly Rate:");
        employeeHourlyRate = sc.nextDouble();
        System.out.println("Employee Commission Percentage:");
        employeeCommission = sc.nextFloat();
        String fullName = firstName + " " +lastName;
        addingEmployee = new Employee(fullName, employeeID, startDate, employeeHourlyRate,employeeCommission);
        System.out.println("Employee was successfully created!");
        return addingEmployee;

    }

    public static void displayEmployees(Employee employeeList[], int numberOfEmployees){
        //Scanner sc = new Scanner(System.in);
        for(int x = 0; x < numberOfEmployees; x++){
            System.out.println("Employee Id: "+ employeeList[x].getEmployeeID() +
                    " | Employee Name: " + employeeList[x].getEmployeeName() +
                    " | Employee Start Date: " + employeeList[x].getEmployeeStartDate() +
                    " | Employee Hourly Rate: " + employeeList[x].getEmployeeHourlyRate() +
                    " | Employee Commission Percentage: " + employeeList[x].getEmployeeCommissionPercentage());
        }

    }

    public static int deleteEmployees(Employee employeeList[], int currentIndex){
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter the employee ID you would like to delete");
        int indexToBeDeleted = sc.nextInt();
        if(indexToBeDeleted <= currentIndex) {
            boolean verification = false;
            System.out.println("Are you sure you want to delete " + employeeList[(indexToBeDeleted - 1)].getEmployeeName() + "?");
            System.out.println("write true to delete, false to cancel");
            verification = sc.nextBoolean();
            if (verification) {
                return indexToBeDeleted;
            } else {
                return ++currentIndex;
            }
        }
        else
            return ++currentIndex;
    }

    public static Employee [] editEmployeeById(Employee employeeListCopy[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter the ID of the employee you wish to edit");
        int id = sc.nextInt();
        employeeListCopy[id] = editEmployee(employeeListCopy[id]);

        return employeeListCopy;
    }

    public static Employee editEmployee(Employee employeeObject){
        String inputEmployeeName, inputEmployeeStartDate;

        double inputEmployeeHourlyRate;
        float inputEmployeeCommissionPercentage;
        int selection;
        Scanner sc = new Scanner(System.in);
        System.out.println("Choose what would you like to edit\n\n");
        System.out.println("1. Edit name");
        System.out.println("2. Edit ID");
        System.out.println("3. Edit start date");
        System.out.println("4. Edit hourly rate");
        System.out.println("5. Edit commission percentage");
        selection = sc.nextInt();
        switch (selection){
            case 1:
                System.out.println("Enter the new first and last name for the employee");
                inputEmployeeName = sc.next();
                inputEmployeeName += " " + sc.next();
                employeeObject.setEmployeeName(inputEmployeeName);
                break;
            case 2:
                System.out.println("Id cannot be changed");
                break;
            case 3:
                System.out.println("Enter the new start date");
                inputEmployeeStartDate = sc.next();
                employeeObject.setEmployeeStartDate(inputEmployeeStartDate);
                break;
            case 4:
                System.out.println("Enter the new hourly rate");
                inputEmployeeHourlyRate = sc.nextDouble();
                employeeObject.setEmployeeHourlyRate(inputEmployeeHourlyRate);
                break;
            case 5:
                System.out.println("Enter the new commission percentage");
                inputEmployeeCommissionPercentage = sc.nextFloat();
                employeeObject.setEmployeeCommissionPercentage(inputEmployeeCommissionPercentage);
                break;
            default:
                System.out.println("Invalid Input");

        }
        System.out.println("You have successfully edited the employee!");

        return employeeObject;
    }

    public static void searchEmployee(Employee listOfEmployees[], int currentIndex){
        int i = 0, counter = 0;

        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter the first name of the employee you are searching for:");
        String nameToSearch = sc.next();

        for(Employee employeeToSearch: listOfEmployees){
            if(currentIndex == i)//if I let employeeToSearch be a null Value it will cause the code to throw a null pointer exception. Hence the reason for this check.
                break;
            else {
                if(employeeToSearch.getEmployeeName().toLowerCase().contains(nameToSearch.toLowerCase())) {
                    System.out.println(employeeToSearch.getEmployeeName());
                    counter++;
                }
            }
            i++;
        }
        i = 0;

        Employee [] temporaryListwithPossibleMatches = new Employee[counter];
        //The second for loop will actually assign the values to the new array so that I can use my already made displayEmployee function.
        System.out.println("There were " + counter + " employees that match that name");
        for(Employee employeeToSearch: listOfEmployees){
            if(i == counter)//Now is my counter that tells me when my array is out of bound
                break;
            else {
                if(employeeToSearch.getEmployeeName().toLowerCase().contains(nameToSearch.toLowerCase())) {
                    temporaryListwithPossibleMatches[i] = employeeToSearch;
                    i++;
                }
            }

        }
       displayEmployees(temporaryListwithPossibleMatches, counter);
    }

    public static void calculatePayForEachEmployeee(Employee listOfEmployees[]){
        System.out.println("Calculating Pay------------------->");
    }

}
